<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyx的博客</title>
  
  <subtitle>It&#39;s the loneliest feeling not to know who you are.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zyx02.github.io/"/>
  <updated>2019-06-25T14:25:15.070Z</updated>
  <id>http://zyx02.github.io/</id>
  
  <author>
    <name>不省一不改名</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>题解 CF581B 【Luxurious Houses】</title>
    <link href="http://zyx02.github.io/2019/06/24/%E9%A2%98%E8%A7%A3-CF581B-%E3%80%90Luxurious-Houses%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/06/24/题解-CF581B-【Luxurious-Houses】/</id>
    <published>2019-06-24T01:56:55.000Z</published>
    <updated>2019-06-25T14:25:15.070Z</updated>
    
    <content type="html"><![CDATA[<p>不难看出，题目要求的是每一个房子后面最高的房子与它的高度差$+1$，（如果比它矮输出$0$）</p><p>我们定义</p><ul><li><p>$maxn[i]$表示第$i$到第$n$个房子高度的最大值（$n$为房子数）</p></li><li><p>$h[i]$表示第$i$个房子的高度</p></li></ul><p>因为$maxn[i+1]$存放的已经是第$i+1$到第$n$个房子的最大值了，所以第$i$到第$n$个房子的最大值只要让当前房子的高度与$maxn[i+1]$进行比较即可</p><p>即$maxn[i]=max(h[i],maxn[i+1])$</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> h[MAXN] , maxn[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">2</span>; i --)</span><br><span class="line">   maxn[i] = max(h[i] , maxn[i + <span class="number">1</span>]); <span class="comment">//预处理最大值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++)</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; max(maxn[i + <span class="number">1</span>] - h[i] + <span class="number">1</span> , <span class="number">0</span>) &lt;&lt; <span class="string">" "</span>;<span class="comment">//如果没比它高要输出0！</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span>;<span class="comment">//最后一个后面已经没有房子了当然是0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不难看出，题目要求的是每一个房子后面最高的房子与它的高度差$+1$，（如果比它矮输出$0$）&lt;/p&gt;
&lt;p&gt;我们定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;$maxn[i]$表示第$i$到第$n$个房子高度的最大值（$n$为房子数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$h[i]$
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="动态规划（dp）" scheme="http://zyx02.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88dp%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF1152A 【Neko Finds Grapes】</title>
    <link href="http://zyx02.github.io/2019/05/19/%E9%A2%98%E8%A7%A3-CF1152A-%E3%80%90Neko-Finds-Grapes%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/05/19/题解-CF1152A-【Neko-Finds-Grapes】/</id>
    <published>2019-05-19T09:03:30.000Z</published>
    <updated>2019-06-25T14:26:08.799Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><p>给出两组数，求两组中的两数之和为奇数的组数（不可重复选取）</p><p>思路：</p><p>我们知道奇数+偶数=奇数</p><p>所以先统计两组中奇数出现的个数和偶数出现的个数</p><p>将第一组数中奇数出现的个数与第二组中偶数进行配对，即取$min(lenji1,lenou2)$ </p><p>再将将第一组数中偶数出现的个数与第二组中奇数进行配对，即取$min(lenou1,lenji2)$</p><p>两个结果相加即可</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> lenji1,lenji2,lenou1,lenou2;<span class="comment">//分别表示第一组数中奇数个数、第二组数中奇数个数、第一组数中偶数个数、第二组中偶数个数</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//统计</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">a%<span class="number">2</span>==<span class="number">1</span>?lenji1++:lenou1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">b%<span class="number">2</span>==<span class="number">1</span>?lenji2++:lenou2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;min(lenji1,lenou2)+min(lenji2,lenou1);<span class="comment">//取min相加</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意：&lt;/p&gt;
&lt;p&gt;给出两组数，求两组中的两数之和为奇数的组数（不可重复选取）&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;我们知道奇数+偶数=奇数&lt;/p&gt;
&lt;p&gt;所以先统计两组中奇数出现的个数和偶数出现的个数&lt;/p&gt;
&lt;p&gt;将第一组数中奇数出现的个数与第二组中偶数进行配对，
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="数论,数学" scheme="http://zyx02.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF17A 【Noldbach problem】</title>
    <link href="http://zyx02.github.io/2019/04/18/%E9%A2%98%E8%A7%A3-CF17A-%E3%80%90Noldbach-problem%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/04/18/题解-CF17A-【Noldbach-problem】/</id>
    <published>2019-04-18T15:26:25.000Z</published>
    <updated>2019-06-25T14:24:39.358Z</updated>
    
    <content type="html"><![CDATA[<p>题目要求的是一个素数与它相邻的素数之和$+1$为素数（注意这个素数要$\le n$）</p><p>思路：</p><ul><li><p>预处理$2$~$n$的素数</p></li><li><p>暴力枚举</p></li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1010</span>],len,n,sum,k;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> num)</span><span class="comment">//素数判断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">2</span> <span class="keyword">or</span> num==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">6</span>!=<span class="number">5</span> <span class="keyword">and</span> num%<span class="number">6</span>!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i*i&lt;=num;i+=<span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span> <span class="keyword">or</span> num%(i+<span class="number">2</span>)==<span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)<span class="comment">//预处理</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime(i))</span><br><span class="line">          p[++len]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=len;i++)<span class="comment">//枚举</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime(p[i<span class="number">-1</span>]+p[i]+<span class="number">1</span>) <span class="keyword">and</span> p[i<span class="number">-1</span>]+p[i]+<span class="number">1</span>&lt;=n)</span><br><span class="line">            sum++; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(sum&gt;=k?<span class="string">"YES"</span>:<span class="string">"NO"</span>);<span class="comment">//相当于if(sum&gt;=k) cout&lt;&lt;"YES";else cout&lt;&lt;"NO";</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用时：$1024ms$</p><p>我们可以在原来的程序做一些小小的优化</p><p>对枚举部分，我们加入一个边界条件</p><p>$p[i-1]+p[i] \le n$（$p[i]$为素数）</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1010</span>],len,n,sum,k;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">2</span> <span class="keyword">or</span> num==<span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">6</span>!=<span class="number">5</span> <span class="keyword">and</span> num%<span class="number">6</span>!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i*i&lt;=num;i+=<span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span> <span class="keyword">or</span> num%(i+<span class="number">2</span>)==<span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime(i))</span><br><span class="line">          p[++len]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=len <span class="keyword">and</span> p[i<span class="number">-1</span>]+p[i]+<span class="number">1</span>&lt;=n;i++)<span class="comment">//边界条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime(p[i<span class="number">-1</span>]+p[i]+<span class="number">1</span>))</span><br><span class="line">            sum++; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(sum&gt;=k?<span class="string">"YES"</span>:<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用时：$994ms$ （$emmm$才快了$30ms$）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目要求的是一个素数与它相邻的素数之和$+1$为素数（注意这个素数要$\le n$）&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;预处理$2$~$n$的素数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;暴力枚举&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Code&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="数论,数学" scheme="http://zyx02.github.io/tags/%E6%95%B0%E8%AE%BA-%E6%95%B0%E5%AD%A6/"/>
    
      <category term="素数" scheme="http://zyx02.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF1133A 【Middle of the Contest】</title>
    <link href="http://zyx02.github.io/2019/04/16/%E9%A2%98%E8%A7%A3-CF1133A-%E3%80%90Middle-of-the-Contest%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/04/16/题解-CF1133A-【Middle-of-the-Contest】/</id>
    <published>2019-04-15T16:02:48.000Z</published>
    <updated>2019-06-25T14:26:11.795Z</updated>
    
    <content type="html"><![CDATA[<p>一道字符串模拟题，思路如下：</p><ul><li><p>1 输入时将两个时间存储</p></li><li><p>2 将两个时间化为以分钟做单位</p></li><li><p>3 得到中间时间与第一个时间的差</p></li><li><p>4 输出</p></li></ul><p>注意：当时间或分钟数$&lt;=9$时，要用$0$补齐位数</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s1,s2; </span><br><span class="line"><span class="keyword">int</span> h1,h2,m1,m2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)<span class="comment">//将时间存储</span></span><br><span class="line">  h1+=(s1[i]-<span class="string">'0'</span>)*<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">1</span>-i),h2+=(s2[i]-<span class="string">'0'</span>)*<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">1</span>-i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">  m1+=(s1[i]-<span class="string">'0'</span>)*<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">4</span>-i),m2+=(s2[i]-<span class="string">'0'</span>)*<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">4</span>-i);</span><br><span class="line"><span class="keyword">int</span> ans=((h2*<span class="number">60</span>+m2)-(h1*<span class="number">60</span>+m1))/<span class="number">2</span>;<span class="comment">//求得中间时间与第一个时间的差</span></span><br><span class="line">h1+=ans/<span class="number">60</span>;<span class="comment">//加上时间差</span></span><br><span class="line">m1+=ans%<span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span>(m1&gt;=<span class="number">60</span>)<span class="comment">//如果分钟&gt;=60要进位</span></span><br><span class="line">&#123;</span><br><span class="line">h1++;</span><br><span class="line">m1%=<span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(h1&lt;=<span class="number">9</span>)<span class="comment">//输出，&lt;=9的用0补齐</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;h1&lt;&lt;<span class="string">":"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;h1&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">   <span class="keyword">if</span>(m1&lt;=<span class="number">9</span>)</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;m1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;m1; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一道字符串模拟题，思路如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 输入时将两个时间存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2 将两个时间化为以分钟做单位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3 得到中间时间与第一个时间的差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4 输出&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="字符串" scheme="http://zyx02.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="模拟" scheme="http://zyx02.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>一些好用的网站</title>
    <link href="http://zyx02.github.io/2019/04/14/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://zyx02.github.io/2019/04/14/一些好用的网站/</id>
    <published>2019-04-14T08:54:10.000Z</published>
    <updated>2019-06-25T14:25:54.237Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.luogu.org/blog/IowaBattleship/latex-gong-shi-tai-quan" target="_blank" rel="noopener">Latex公式大全</a></p></li><li><p><a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">Latex在线编辑器</a></p></li><li><p><a href="https://www.desmos.com/calculator" target="_blank" rel="noopener">函数图像绘制</a></p></li><li><p><a href="https://oi-wiki.org/" target="_blank" rel="noopener">OI Wiki</a></p></li><li><p><a href="https://csacademy.com/app/graph_editor/" target="_blank" rel="noopener">图论作图工具</a></p></li><li><p><a href="http://oeis.org/" target="_blank" rel="noopener">数列查询网站</a></p></li><li><p><a href="https://zh.numberempire.com/" target="_blank" rel="noopener">数学工具</a></p></li><li><p><a href="https://yutong.site/sam/" target="_blank" rel="noopener">画SAM</a></p></li><li><p><a href="http://bigjpg.com" target="_blank" rel="noopener">放大图片</a></p></li><li><p><a href="https://visualgo.net/zh" target="_blank" rel="noopener">数据结构与算法可视化</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/blog/IowaBattleship/latex-gong-shi-tai-quan&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Latex公式大全&lt;/a&gt;&lt;/p&gt;
&lt;/l
      
    
    </summary>
    
    
      <category term="工具" scheme="http://zyx02.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF1118A 【Water Buying】</title>
    <link href="http://zyx02.github.io/2019/04/11/%E9%A2%98%E8%A7%A3-CF1118A-%E3%80%90Water-Buying%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/04/11/题解-CF1118A-【Water-Buying】/</id>
    <published>2019-04-11T13:43:57.000Z</published>
    <updated>2019-06-25T14:25:31.636Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><p>你需要买$n$升水，现在有两种规格的水瓶：1升水的和2升水的，现给出1升水和2升水水瓶的单价，求最少需要花费多少钱。有$q$个询问。</p><p>思路：贪心</p><p>要使总花费最小，我们需要尽量多选取性价比高的规格。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,a,b;<span class="comment">//注意要开long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a*<span class="number">2</span>&lt;=b)<span class="comment">//买1升的性价比高于买2升的性价比</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;n*a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n/<span class="number">2</span>*b+(n-n/<span class="number">2</span>*<span class="number">2</span>)*a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//题目要求的是刚好购买n升，所以不足2升的要买1升的补齐</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意：&lt;/p&gt;
&lt;p&gt;你需要买$n$升水，现在有两种规格的水瓶：1升水的和2升水的，现给出1升水和2升水水瓶的单价，求最少需要花费多少钱。有$q$个询问。&lt;/p&gt;
&lt;p&gt;思路：贪心&lt;/p&gt;
&lt;p&gt;要使总花费最小，我们需要尽量多选取性价比高的规格。&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="贪心" scheme="http://zyx02.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF1092B 【Teams Forming】</title>
    <link href="http://zyx02.github.io/2019/04/10/%E9%A2%98%E8%A7%A3-CF1092B-%E3%80%90Teams-Forming%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/04/10/题解-CF1092B-【Teams-Forming】/</id>
    <published>2019-04-10T14:08:21.000Z</published>
    <updated>2019-06-25T14:25:25.543Z</updated>
    
    <content type="html"><![CDATA[<p>这题的基本思想就是贪心吧</p><p>题目就是让你两两分组，使得每组能力值的差值最小</p><p>设$a<em>{1},a</em>{2},···,a_{n}$表示每个学生的能力值</p><p>且满足：$a<em>{1} \le a</em>{2} \le ··· \le a_{n}$</p><p>则对于任意一个能力值$a<em>{i}$，它的最优匹配为$a</em>{i+1}$（$i$为奇数）</p><p>考虑到$a<em>{1}$，我们不取$a</em>{i-1}$（你想想$a_{1-1}$是什么）</p><p>假设存在一个能力值$a<em>{k}$ ($k&gt; i+1$)，使得$a</em>{k}-a<em>{i}&lt; a</em>{i+1}-a_{i}$</p><p>即: $a<em>{k}&lt;a</em>{i+1}$</p><p>∵ $a<em>{i+1}&lt;a</em>{k}$</p><p>∴ 不存在这样的$k$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>],ans; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);<span class="comment">//要先排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>) <span class="comment">//i要为奇数</span></span><br><span class="line">&#123;    </span><br><span class="line">ans+=a[i+<span class="number">1</span>]-a[i];<span class="comment">//答案加上两个能力值的差</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这题的基本思想就是贪心吧&lt;/p&gt;
&lt;p&gt;题目就是让你两两分组，使得每组能力值的差值最小&lt;/p&gt;
&lt;p&gt;设$a&lt;em&gt;{1},a&lt;/em&gt;{2},···,a_{n}$表示每个学生的能力值&lt;/p&gt;
&lt;p&gt;且满足：$a&lt;em&gt;{1} \le a&lt;/em&gt;{2} \le ··· \
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="贪心" scheme="http://zyx02.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF1145F 【Neat Words】</title>
    <link href="http://zyx02.github.io/2019/04/08/%E9%A2%98%E8%A7%A3-CF1145F-%E3%80%90Neat-Words%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/04/08/题解-CF1145F-【Neat-Words】/</id>
    <published>2019-04-08T13:30:27.000Z</published>
    <updated>2019-06-25T14:26:10.485Z</updated>
    
    <content type="html"><![CDATA[<p>这题其实是一道很水的字符串模拟，不要被难度骗了</p><p><del>CF恶意评分又不是一两天了（雾）</del></p><p>注意题目中说到的</p><blockquote><p>由直线或都是由曲线构成的</p></blockquote><p>是指该字母的笔画（我理解题目理解了半天$qwq$）</p><p>具体思路：</p><ul><li>1 应用$map$将由直线（或者曲线）构成的字母的映射值设为1</li></ul><ul><li>2 计算该字符串的所有对应的映射值之和，因为题目要求全为直线或全为曲线，所以当总和为$len$($len$为字符串长度)或$0$时，输出$YES$，否则输出$NO$</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">bool</span>&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">p[<span class="string">'A'</span>]=<span class="number">1</span>;<span class="comment">//打表</span></span><br><span class="line">p[<span class="string">'E'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'F'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'H'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'I'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'K'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'L'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'M'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'N'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'T'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'V'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'W'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'X'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'Y'</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="string">'Z'</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++) sum+=p[s[i]];<span class="comment">//统计映射值之和</span></span><br><span class="line"><span class="keyword">if</span>(sum==s.size() <span class="keyword">or</span> sum==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>;<span class="comment">//判断</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这题其实是一道很水的字符串模拟，不要被难度骗了&lt;/p&gt;
&lt;p&gt;&lt;del&gt;CF恶意评分又不是一两天了（雾）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;注意题目中说到的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由直线或都是由曲线构成的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是指该字母的笔画
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="字符串" scheme="http://zyx02.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="模拟" scheme="http://zyx02.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>题解 P1794 【装备运输_NOI导刊2010提高（04）】</title>
    <link href="http://zyx02.github.io/2019/04/06/%E9%A2%98%E8%A7%A3-P1794-%E3%80%90%E8%A3%85%E5%A4%87%E8%BF%90%E8%BE%93-NOI%E5%AF%BC%E5%88%8A2010%E6%8F%90%E9%AB%98%EF%BC%8804%EF%BC%89%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/04/06/题解-P1794-【装备运输-NOI导刊2010提高（04）】/</id>
    <published>2019-04-06T06:15:59.000Z</published>
    <updated>2019-06-25T14:26:01.197Z</updated>
    
    <content type="html"><![CDATA[<p>一道01背包模板题吧。。。其实就是再增加了一个体积参数</p><p>状态转移方程：</p><p>$F<em>{j,k}=max(F</em>{j-v<em>{i},k-g</em>{i}}+t<em>{i},F</em>{j,k})$</p><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> V,G,n;<span class="comment">//V和G为最大体积和重量</span></span><br><span class="line"><span class="keyword">int</span> t[<span class="number">510</span>],v[<span class="number">510</span>],g[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;V&gt;&gt;G;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;t[i]&gt;&gt;v[i]&gt;&gt;g[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=V;j&gt;=v[i];j--)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=G;k&gt;=g[i];k--) </span><br><span class="line">      f[j][k]=max(f[j-v[i]][k-g[i]]+t[i],f[j][k]);<span class="comment">//状态转移方程</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f[V][G];<span class="comment">//f[V][G]即为答案</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一道01背包模板题吧。。。其实就是再增加了一个体积参数&lt;/p&gt;
&lt;p&gt;状态转移方程：&lt;/p&gt;
&lt;p&gt;$F&lt;em&gt;{j,k}=max(F&lt;/em&gt;{j-v&lt;em&gt;{i},k-g&lt;/em&gt;{i}}+t&lt;em&gt;{i},F&lt;/em&gt;{j,k})$&lt;/p&gt;
&lt;p&gt;Code&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="动态规划（dp）" scheme="http://zyx02.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88dp%EF%BC%89/"/>
    
      <category term="背包" scheme="http://zyx02.github.io/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF1043A 【Elections】</title>
    <link href="http://zyx02.github.io/2019/04/01/%E9%A2%98%E8%A7%A3-CF1043A-%E3%80%90Elections%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/04/01/题解-CF1043A-【Elections】/</id>
    <published>2019-04-01T15:41:41.000Z</published>
    <updated>2019-06-25T14:25:20.001Z</updated>
    
    <content type="html"><![CDATA[<p>一看数据范围， $1 \le n \le 100 $，此时不枚举更待何时？（雾）</p><p>注意获胜是指小$A$的票数大于小$B$的票数，而不是大于等于。（原谅作者语文不好$qwq$）</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> sum1,sum2;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">//自定义排序函数，从大到小排</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i],sum1+=a[i];<span class="comment">//预处理小B的票数</span></span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,comp);<span class="comment">//因为k&gt;=max&#123;ai&#125;，所以考虑先排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=a[<span class="number">1</span>];;k++)</span><br><span class="line">&#123;</span><br><span class="line">sum2=<span class="number">0</span>;<span class="comment">//一定要初始化！</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  sum2+=k-a[i];<span class="comment">//每个人投给小A的票数就是每个人可以投的票数减去每个人投给小B的票数</span></span><br><span class="line"><span class="keyword">if</span>(sum2&gt;sum1)<span class="comment">//是&gt;不是&gt;=</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;k;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察一下代码，我们发现可以在求小$A$的票数部分做一些小小的优化</p><p>观察可以发现，$sum2$=$\sum<em>{i=1}^{n}(k-a</em>{i})$</p><p>原式</p><p>$=$ $k\times n-\sum<em>{i=1}^{n}a</em>{i}$ </p><p>$=$ $k\times n-sum1$</p><p>于是在求小$A$的票数部分可以优化到$O(1)$复杂度</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> sum1,sum2;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i],sum1+=a[i];</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,comp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=a[<span class="number">1</span>];;k++)</span><br><span class="line">&#123;</span><br><span class="line">sum2=k*n-sum1;<span class="comment">//求小A的票数，当然你也可以不用再设一个变量直接比较</span></span><br><span class="line"><span class="keyword">if</span>(sum2&gt;sum1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;k;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们再观察一下这个程序，我们发现，这个程序其实就要求最小的$k$，使得$k$满足$k\times n-sum1&gt;sum1$</p><p>这不就是一个不等式吗</p><p>移项： $k\times n&gt;2\times sum1$</p><p>系数化一: $k&gt;2\times sum1 /n$</p><p>于是在求答案的部分就可以优化到$O(1)$复杂度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> sum1;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i],sum1+=a[i];</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,comp);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>*sum1/n+<span class="number">1</span>&lt;a[<span class="number">1</span>]) <span class="built_in">cout</span>&lt;&lt;a[<span class="number">1</span>];<span class="comment">//因为k要&gt;=max a[i]，所以如果2*sum/n+1&lt;a[1]要输出a[1]</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>*sum1/n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一看数据范围， $1 \le n \le 100 $，此时不枚举更待何时？（雾）&lt;/p&gt;
&lt;p&gt;注意获胜是指小$A$的票数大于小$B$的票数，而不是大于等于。（原谅作者语文不好$qwq$）&lt;/p&gt;
&lt;h3 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="枚举" scheme="http://zyx02.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>set学习笔记</title>
    <link href="http://zyx02.github.io/2019/03/31/set%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zyx02.github.io/2019/03/31/set学习笔记/</id>
    <published>2019-03-30T17:25:40.000Z</published>
    <updated>2019-06-25T14:24:07.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是set-和-set的好处"><a href="#1-什么是set-和-set的好处" class="headerlink" title="1.什么是set 和 set的好处"></a>1.什么是set 和 set的好处</h2><p>$set$的翻译为集合，是一个内部自动有序且不含重复元素(即满足集合的互异性)的$STL$容器，其内部采用“红黑树”实现。</p><p>什么是集合？<a href="https://baike.baidu.com/item/%E9%9B%86%E5%90%88/2908117?fr=aladdin" target="_blank" rel="noopener">点这</a></p><p>$set$的好处在于自动完成去重和按升序排序</p><h2 id="2-举个栗子"><a href="#2-举个栗子" class="headerlink" title="2.举个栗子"></a>2.举个栗子</h2><p>比如<a href="https://www.luogu.org/problemnew/show/P1059" target="_blank" rel="noopener">这题</a></p><h4 id="1-普通作法"><a href="#1-普通作法" class="headerlink" title="1.普通作法"></a>1.普通作法</h4><p>看到数据范围这么水肯定想到用桶排</p><p>Code<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">1001</span>],n,i,j,m=<span class="number">0</span>,x;</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(b[x]==<span class="number">0</span>) m++;</span><br><span class="line">        b[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">      <span class="keyword">if</span>(b[i]&gt;<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-set"><a href="#2-set" class="headerlink" title="2.set"></a>2.set</h4><p>如果你会了$set$，这道题就可以这么打</p><p>Code<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        st.insert(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,st.size()); </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it= st.begin(); it!=st.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,*it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果数据范围大了话，明显不能用桶排解决，这时候$set$的好处就可以体现出来。</p><p>领会了$set$的好处之后，接下来让我们了解</p><h2 id="3-set的定义"><a href="#3-set的定义" class="headerlink" title="3.set的定义"></a>3.set的定义</h2><p>使用$set$之前，必须添加$set$头文件，即<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>也可以打好我们的$bits/stdc++.h$</p><p>同时必须要有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>定义一个$set$的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>其中$typename$为任何基本类型或者容器，$name$为这个集合的名字</p><p>同时$set$也支持定义数组，如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;typename&gt; name[MAXN]</span><br></pre></td></tr></table></figure><p>即定义了$MAXN$个$set$容器</p><h2 id="4-set的访问"><a href="#4-set的访问" class="headerlink" title="4.set的访问"></a>4.set的访问</h2><p>一大坑点是$set$只能通过迭代器访问</p><h3 id="1-定义一个迭代器"><a href="#1-定义一个迭代器" class="headerlink" title="1.定义一个迭代器"></a>1.定义一个迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">typename</span>&gt;::iterator it;</span><br></pre></td></tr></table></figure><p>即定义一个名为$it$的迭代器</p><h3 id="2-通过迭代器访问"><a href="#2-通过迭代器访问" class="headerlink" title="2.通过迭代器访问"></a>2.通过迭代器访问</h3><p>注意事项：</p><ul><li><p>1 $set$不支持类似*$(it+i)$的访问</p></li><li><p>2 $set$也不支持$it&lt;name.end()$这种访问</p></li></ul><p>我们需要使用*$it$来访问$set$中的元素</p><h2 id="5-set的常用函数"><a href="#5-set的常用函数" class="headerlink" title="5.set的常用函数"></a>5.set的常用函数</h2><h3 id="1-insert"><a href="#1-insert" class="headerlink" title="1.insert()"></a>1.insert()</h3><h4 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h4><p>$insert()$用来插入一个数到$set$中，并自动排序+去重</p><h4 id="2-时间复杂度"><a href="#2-时间复杂度" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(log_{2}n)$</p><h4 id="3-用法"><a href="#3-用法" class="headerlink" title="3.用法"></a>3.用法</h4><p>例如，以下一段代码输出$1$ $2$ $3 $</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">1</span>;i--) a.insert(i);</span><br><span class="line">a.insert(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-begin-和end"><a href="#2-begin-和end" class="headerlink" title="2.begin()和end()"></a>2.begin()和end()</h3><h4 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1.作用"></a>1.作用</h4><p>分别用来获取$set$容器的首地址和尾地址</p><p>用法跟其他$STL$容器一样这里不再赘述</p><h3 id="3-size"><a href="#3-size" class="headerlink" title="3.size()"></a>3.size()</h3><h4 id="1-作用-2"><a href="#1-作用-2" class="headerlink" title="1.作用"></a>1.作用</h4><p>用于获取$set$容器中元素的个数</p><h4 id="2-时间复杂度-1"><a href="#2-时间复杂度-1" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(1)$</p><h4 id="3-用法-1"><a href="#3-用法-1" class="headerlink" title="3.用法"></a>3.用法</h4><p>例如，以下一段代码输出$3$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">1</span>;i--) a.insert(i);</span><br><span class="line">a.insert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.size();</span><br></pre></td></tr></table></figure><h3 id="4-clear"><a href="#4-clear" class="headerlink" title="4.clear()"></a>4.clear()</h3><h4 id="1-作用-3"><a href="#1-作用-3" class="headerlink" title="1.作用"></a>1.作用</h4><p>用于清空$set$容器中的所有元素</p><h4 id="2-时间复杂度-2"><a href="#2-时间复杂度-2" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(n)$ ($n$为$set$中的元素个数)</p><h4 id="3-用法-2"><a href="#3-用法-2" class="headerlink" title="3.用法"></a>3.用法</h4><p>例如，以下一段代码输出$1$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">1</span>;i--) a.insert(i);</span><br><span class="line">a.clear();</span><br><span class="line">a.insert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.size();</span><br></pre></td></tr></table></figure><h3 id="5-erase"><a href="#5-erase" class="headerlink" title="5.erase()"></a>5.erase()</h3><h4 id="1-作用-4"><a href="#1-作用-4" class="headerlink" title="1.作用"></a>1.作用</h4><p>可以用来删除单个元素也可以用来删除一段区间的元素</p><p>1.删除单个元素</p><h5 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a>1.时间复杂度</h5><p>$O(1)$ (使用迭代器)</p><p>$O(log_{2}n)$ (使用欲删除元素的值)</p><h5 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h5><p>1.$erase(it)$</p><p>$it$为欲删除的元素的迭代器</p><p>例如，以下一段代码输出$2$ $3$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">1</span>;i--) a.insert(i);</span><br><span class="line">a.erase(a.begin());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.$erase(value)$</p><p>$value$为欲删除元素的值</p><p>例如以下一段代码输出$1$ $3$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">1</span>;i--) a.insert(i);</span><br><span class="line">a.erase(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.删除一个区间的元素</p><h5 id="1-时间复杂度-1"><a href="#1-时间复杂度-1" class="headerlink" title="1.时间复杂度"></a>1.时间复杂度</h5><p>$O(right-left)$ $(左闭右开区间[left,right))$</p><h5 id="2-用法-1"><a href="#2-用法-1" class="headerlink" title="2.用法"></a>2.用法</h5><p>$erase(left,right)$用来删除左闭右开区间[$left$,$right$)之间的元素</p><p>例如，以下一段代码输出$1$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&gt;=<span class="number">1</span>;i--) a.insert(i);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.find(<span class="number">2</span>);</span><br><span class="line">a.erase(it,a.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-find"><a href="#6-find" class="headerlink" title="6.find()"></a>6.find()</h3><h4 id="1-作用-5"><a href="#1-作用-5" class="headerlink" title="1.作用"></a>1.作用</h4><p>返回元素在$set$中的迭代器</p><h4 id="2-时间复杂度-3"><a href="#2-时间复杂度-3" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(log_{2}n)$ ($n$为$set$中的元素个数)</p><h4 id="3-用法-3"><a href="#3-用法-3" class="headerlink" title="3.用法"></a>3.用法</h4><p>例如，以下一段代码输出$2$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&gt;=<span class="number">1</span>;i--) a.insert(i);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*a.find(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="6-推荐例题"><a href="#6-推荐例题" class="headerlink" title="6.推荐例题"></a>6.推荐例题</h2><ul><li>1 <a href="https://www.luogu.org/problemnew/show/P1059" target="_blank" rel="noopener">洛谷P1059 明明的随机数</a></li></ul><p>之后还会继续放上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-什么是set-和-set的好处&quot;&gt;&lt;a href=&quot;#1-什么是set-和-set的好处&quot; class=&quot;headerlink&quot; title=&quot;1.什么是set 和 set的好处&quot;&gt;&lt;/a&gt;1.什么是set 和 set的好处&lt;/h2&gt;&lt;p&gt;$set$的翻译为集
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="set" scheme="http://zyx02.github.io/tags/set/"/>
    
      <category term="学习笔记" scheme="http://zyx02.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF1130A 【Be Positive】</title>
    <link href="http://zyx02.github.io/2019/03/30/%E9%A2%98%E8%A7%A3-CF1130A-%E3%80%90Be-Positive%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/03/30/题解-CF1130A-【Be-Positive】/</id>
    <published>2019-03-29T16:47:02.000Z</published>
    <updated>2019-06-25T14:26:13.558Z</updated>
    
    <content type="html"><![CDATA[<p>一看数据范围：</p><p>$-10^{3}\le d \le 10^{3}$，$1 \le n \le 100$</p><p>这是让我们<del>打表</del>枚举的节奏啊（雾）</p><p>思路很简单，枚举每一个$d$，判断是否满足条件即可</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">-1000</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">continue</span>;<span class="comment">//d不能为0</span></span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(a[j]*i&gt;<span class="number">0</span>) sum++;<span class="comment">//a[i]/d与a[i]*d同正负</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>*sum&gt;=n) <span class="comment">//满足条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一看数据范围：&lt;/p&gt;
&lt;p&gt;$-10^{3}\le d \le 10^{3}$，$1 \le n \le 100$&lt;/p&gt;
&lt;p&gt;这是让我们&lt;del&gt;打表&lt;/del&gt;枚举的节奏啊（雾）&lt;/p&gt;
&lt;p&gt;思路很简单，枚举每一个$d$，判断是否满足条件即可&lt;/p&gt;
&lt;h3 id
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="枚举" scheme="http://zyx02.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>A+B problem(高精)python</title>
    <link href="http://zyx02.github.io/2019/03/27/A-B-problem-%E9%AB%98%E7%B2%BE-python/"/>
    <id>http://zyx02.github.io/2019/03/27/A-B-problem-高精-python/</id>
    <published>2019-03-27T15:17:25.000Z</published>
    <updated>2019-06-25T14:23:51.898Z</updated>
    
    <content type="html"><![CDATA[<p>自带高精就是好呢，代码好简单/QwQ<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=input()</span><br><span class="line">b=input()</span><br><span class="line">a=int(a)</span><br><span class="line">b=int(b)</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自带高精就是好呢，代码好简单/QwQ&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="python" scheme="http://zyx02.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF102A 【Clothes】</title>
    <link href="http://zyx02.github.io/2019/03/27/%E9%A2%98%E8%A7%A3-CF102A-%E3%80%90Clothes%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/03/27/题解-CF102A-【Clothes】/</id>
    <published>2019-03-27T12:51:31.000Z</published>
    <updated>2019-06-25T14:25:04.508Z</updated>
    
    <content type="html"><![CDATA[<p>本萌新来介绍一种$dfs$思路：</p><ul><li><p>1 如果件数已经$=$3，那么判断，如果符合条件，则更新答案</p></li><li><p>2 如果件数$&lt;$3，那么枚举$1$~$n$,如果该件衣服没被取过，则标记为已取并$dfs$下一件</p></li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,money[<span class="number">110</span>],minx=INT_MAX;</span><br><span class="line"><span class="keyword">bool</span> p[<span class="number">110</span>][<span class="number">110</span>],f,use[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">()</span><span class="comment">//判断是否符合条件</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[s[<span class="number">1</span>]][s[<span class="number">2</span>]] <span class="keyword">and</span> p[s[<span class="number">1</span>]][s[<span class="number">3</span>]] <span class="keyword">and</span> p[s[<span class="number">2</span>]][s[<span class="number">3</span>]]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">3</span>)<span class="comment">//件数&gt;3判断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(comp())</span><br><span class="line">    &#123;</span><br><span class="line">    f=<span class="number">1</span>;<span class="comment">//标记为有方案</span></span><br><span class="line">    minx=min(minx,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!use[i])<span class="comment">//该件衣服没被取过</span></span><br><span class="line">&#123;</span><br><span class="line">s[t]=i;<span class="comment">//保存答案编号用于之后判断</span></span><br><span class="line">use[i]=<span class="number">1</span>;<span class="comment">//标记为已取</span></span><br><span class="line">dfs(t+<span class="number">1</span>,sum+money[i]);</span><br><span class="line">use[i]=<span class="number">0</span>;<span class="comment">//回溯</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;money[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    p[x][y]=<span class="number">1</span>;<span class="comment">//建有向图</span></span><br><span class="line">    p[y][x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(f) <span class="built_in">cout</span>&lt;&lt;minx;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本萌新来介绍一种$dfs$思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 如果件数已经$=$3，那么判断，如果符合条件，则更新答案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2 如果件数$&amp;lt;$3，那么枚举$1$~$n$,如果该件衣服没被取过，则标记为已取并$dfs$下一件&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="深度优先搜索（dfs）" scheme="http://zyx02.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88dfs%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>string学习笔记</title>
    <link href="http://zyx02.github.io/2019/03/24/string%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zyx02.github.io/2019/03/24/string学习笔记/</id>
    <published>2019-03-23T16:02:40.000Z</published>
    <updated>2019-06-25T14:24:15.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-What’s-string"><a href="#1-What’s-string" class="headerlink" title="1.What’s string"></a>1.What’s string</h2><p>$string$ 是一种$STL$的容器，支持多种字符串操作。</p><h2 id="2-string的定义"><a href="#2-string的定义" class="headerlink" title="2.string的定义"></a>2.string的定义</h2><p>使用$string$需要添加头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><p>或者打好万能库，胜过<del>zhw</del></p><p>同时必须要有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>定义$string$的方法非常简单，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name;<span class="comment">//name为字符串名称</span></span><br></pre></td></tr></table></figure><p>同时也可以定义$string$数组，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name[MAXN];<span class="comment">//name为数组名，MAXN为数组大小</span></span><br></pre></td></tr></table></figure><p>即这个数组中的每一个元素都是$string$类型</p><h2 id="3-string初始化"><a href="#3-string初始化" class="headerlink" title="3.string初始化"></a>3.string初始化</h2><p>可以直接在定义的时候初始化，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name=<span class="string">"I love C++!"</span>;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">name=<span class="string">"I love C++!"</span>;</span><br></pre></td></tr></table></figure><p>也可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">(<span class="string">"I love C++!"</span>)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-string的访问"><a href="#4-string的访问" class="headerlink" title="4.string的访问"></a>4.string的访问</h2><h3 id="1-通过下标访问"><a href="#1-通过下标访问" class="headerlink" title="1.通过下标访问"></a>1.通过下标访问</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++!"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,s[<span class="number">0</span>]);<span class="comment">//输出I</span></span><br></pre></td></tr></table></figure><h3 id="2-通过迭代器访问"><a href="#2-通过迭代器访问" class="headerlink" title="2.通过迭代器访问"></a>2.通过迭代器访问</h3><h4 id="1-迭代器的定义"><a href="#1-迭代器的定义" class="headerlink" title="1.迭代器的定义"></a>1.迭代器的定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>::iterator node;<span class="comment">//定义一个名为node的迭代器</span></span><br></pre></td></tr></table></figure><h4 id="2-访问"><a href="#2-访问" class="headerlink" title="2.访问"></a>2.访问</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++"</span>;</span><br><span class="line"><span class="built_in">string</span>::iterator node=s.begin()<span class="comment">//获取s的首地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,*node);<span class="comment">//输出I(因为是迭代器所以前面要加上*)</span></span><br></pre></td></tr></table></figure><h2 id="5-string的基本运算"><a href="#5-string的基本运算" class="headerlink" title="5.string的基本运算"></a>5.string的基本运算</h2><h3 id="1-加法运算"><a href="#1-加法运算" class="headerlink" title="1.加法运算"></a>1.加法运算</h3><p>加法运算可以将两个字符串拼接在一起，但加号两边必须至少有一个为$string$类型</p><p>如，下列程序是合法的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1=<span class="string">"I love "</span>;</span><br><span class="line"><span class="built_in">string</span> s2=<span class="string">"C++"</span>;</span><br><span class="line">s1+=s2;<span class="comment">//等价于s1=s1+s2</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s1;<span class="comment">//输出I love C++</span></span><br></pre></td></tr></table></figure><p>但下列程序是不合法的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1=<span class="string">"I love "</span>+<span class="string">"C++"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>下列程序依然合法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s2=<span class="string">"C"</span>;</span><br><span class="line"><span class="built_in">string</span> s1=<span class="string">"I love "</span>+s2+<span class="string">"++"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出I love C++</span></span><br></pre></td></tr></table></figure><h3 id="2-关系运算"><a href="#2-关系运算" class="headerlink" title="2.关系运算"></a>2.关系运算</h3><p>关系运算可以按字典序比较两个字符串的大小，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1=<span class="string">"abcde"</span>;</span><br><span class="line"><span class="built_in">string</span> s2=<span class="string">"bcdef"</span>;</span><br><span class="line"><span class="keyword">if</span>(s1&lt;s2) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Winner!"</span>;<span class="comment">//输出Winner!</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Lose!"</span>;</span><br></pre></td></tr></table></figure><h2 id="6-string的输入与输出"><a href="#6-string的输入与输出" class="headerlink" title="6.string的输入与输出"></a>6.string的输入与输出</h2><h3 id="1-利用cin和cout输入输出"><a href="#1-利用cin和cout输入输出" class="headerlink" title="1.利用cin和cout输入输出"></a>1.利用cin和cout输入输出</h3><p>$cin$在读到空格时将会停止读入，例如以下一段程序输入$123$ $456$后，仅会输出$123$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;</span><br></pre></td></tr></table></figure><h3 id="2-利用getline输入"><a href="#2-利用getline输入" class="headerlink" title="2.利用getline输入"></a>2.利用getline输入</h3><p>$getline$可以用来读整行的字符串(包括空格)，例如以下一段程序输入$123$ $456$后，输出$123$ $456$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;</span><br></pre></td></tr></table></figure><h3 id="3-将string转换为字符数组输入输出"><a href="#3-将string转换为字符数组输入输出" class="headerlink" title="3.将string转换为字符数组输入输出"></a>3.将string转换为字符数组输入输出</h3><p>$c$_$str()$可以将$string$转换为字符数组，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s.c_str());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,s.c_str());</span><br></pre></td></tr></table></figure><p>输入$123$ $456$ 输出$123$ </p><h2 id="7-string的常用函数"><a href="#7-string的常用函数" class="headerlink" title="7.string的常用函数"></a>7.string的常用函数</h2><h3 id="1-length-和size"><a href="#1-length-和size" class="headerlink" title="1.length()和size()"></a>1.length()和size()</h3><h4 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h4><p>用来获取字符串的长度，即字符个数</p><h4 id="2-时间复杂度"><a href="#2-时间复杂度" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(1)$</p><h4 id="3-用法"><a href="#3-用法" class="headerlink" title="3.用法"></a>3.用法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"abcd"</span>;</span><br><span class="line"><span class="keyword">int</span> len=s.size();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;len;<span class="comment">//输出4</span></span><br></pre></td></tr></table></figure><h3 id="2-begin-和end"><a href="#2-begin-和end" class="headerlink" title="2.begin()和end()"></a>2.begin()和end()</h3><h4 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1.作用"></a>1.作用</h4><p>分别用来获取字符串的首地址和尾地址，一般与迭代器配合使用</p><h4 id="2-时间复杂度-1"><a href="#2-时间复杂度-1" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(1)$?</p><h4 id="3-用法-1"><a href="#3-用法-1" class="headerlink" title="3.用法"></a>3.用法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++!"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::iterator it=s.begin()+<span class="number">2</span>;it!=s.end();it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,*it);<span class="comment">//输出love C++! </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-clear"><a href="#3-clear" class="headerlink" title="3.clear()"></a>3.clear()</h3><h4 id="1-作用-2"><a href="#1-作用-2" class="headerlink" title="1.作用"></a>1.作用</h4><p>用来清空字符串中的所有元素</p><h4 id="2-时间复杂度-2"><a href="#2-时间复杂度-2" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(1)$</p><h4 id="3-用法-2"><a href="#3-用法-2" class="headerlink" title="3.用法"></a>3.用法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++!"</span>;</span><br><span class="line">s.clear();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出为空</span></span><br></pre></td></tr></table></figure><h3 id="4-substr"><a href="#4-substr" class="headerlink" title="4.substr()"></a>4.substr()</h3><h4 id="1-作用-3"><a href="#1-作用-3" class="headerlink" title="1.作用"></a>1.作用</h4><p>返回字符串的字串</p><h4 id="2-时间复杂度-3"><a href="#2-时间复杂度-3" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(n)$ ($n$为字符串长度)</p><h4 id="3-用法-3"><a href="#3-用法-3" class="headerlink" title="3.用法"></a>3.用法</h4><p>$s.substr(node,len)$返回从$node$位置开始，长度为$len$的字串</p><p>如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++!"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.substr(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//输出love</span></span><br></pre></td></tr></table></figure><h3 id="5-insert"><a href="#5-insert" class="headerlink" title="5.insert()"></a>5.insert()</h3><h4 id="1-作用-4"><a href="#1-作用-4" class="headerlink" title="1.作用"></a>1.作用</h4><p>插入字符串</p><h4 id="2-时间复杂度-4"><a href="#2-时间复杂度-4" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(n)$ ($n$为字符串长度)</p><h4 id="3-用法-4"><a href="#3-用法-4" class="headerlink" title="3.用法"></a>3.用法</h4><p>$insert$有多种写法</p><p>1.$insert(node,s)$ 在$node$号位置插入字符串$s$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I  C++!"</span>;</span><br><span class="line">s.insert(<span class="number">2</span>,<span class="string">"love"</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><p>2.$insert(node,s,sum)$ 在$node$号位置插入字符串$s$的前$sum$个字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I  C++!"</span>;</span><br><span class="line">s.insert(<span class="number">2</span>,<span class="string">"love python"</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><p>3.$insert(it,it2,it3)$ $it$为原字符串的欲插入位置，$it1$,$it2$为待插入字符串的首尾迭代器(左闭右开)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I  C++!"</span>;</span><br><span class="line"><span class="built_in">string</span> ss=<span class="string">"love python"</span>;</span><br><span class="line">s.insert(s.begin()+<span class="number">2</span>,ss.begin(),ss.begin()+<span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><p>4.$insert(node,sum,c)$ 在$node$号位置插入$sum$个字符$c$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C!"</span>;</span><br><span class="line">s.insert(<span class="number">8</span>,<span class="number">2</span>,<span class="string">'+'</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><h3 id="6-erase"><a href="#6-erase" class="headerlink" title="6.erase()"></a>6.erase()</h3><h4 id="1-作用-5"><a href="#1-作用-5" class="headerlink" title="1.作用"></a>1.作用</h4><p>$erase()$可以删除单个字符或一个区间内的字符</p><h4 id="2-时间复杂度-5"><a href="#2-时间复杂度-5" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(n)$ ($n$为字符串长度)</p><h4 id="3-用法-5"><a href="#3-用法-5" class="headerlink" title="3.用法"></a>3.用法</h4><p>1.$erase(it)$ $it$为欲删除元素的迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C+++!"</span>;</span><br><span class="line">s.erase(s.begin()+<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><p>2.$erase(left,right)$ $left$为区间的起始迭代器，$right$为区间末尾迭代器的下一个地址。左闭右开区间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++++!"</span>;</span><br><span class="line">s.erase(s.begin()+<span class="number">10</span>,s.begin()+<span class="number">12</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><p>3.$erase(node,len)$ 删除从$node$号位置开始$len$个字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++++!"</span>;</span><br><span class="line">s.erase(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><h3 id="7-find"><a href="#7-find" class="headerlink" title="7.find()"></a>7.find()</h3><h4 id="1-作用-6"><a href="#1-作用-6" class="headerlink" title="1.作用"></a>1.作用</h4><p>返回子串第一次出现的位置，如果找不到返回string::npos</p><h4 id="2，时间复杂度"><a href="#2，时间复杂度" class="headerlink" title="2，时间复杂度"></a>2，时间复杂度</h4><p>$O(nm)$ $n,m$分别为第一个，第二个字符串的长度</p><h4 id="3，用法"><a href="#3，用法" class="headerlink" title="3，用法"></a>3，用法</h4><p>1.$find(s)$，返回$s$在原字符串第一次出现的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++!"</span>;</span><br><span class="line"><span class="keyword">if</span>(s.find(<span class="string">"C++"</span>)!=<span class="built_in">string</span>::npos)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s.find(<span class="string">"C++"</span>)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span>(s.find(<span class="string">"python"</span>)!=<span class="built_in">string</span>::npos)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s.find(<span class="string">"python"</span>)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="string">" "</span>;<span class="comment">//输出7 -1</span></span><br></pre></td></tr></table></figure><p>2.$find(s,node)$ 返回原字符串从$node$号位置开始$s$第一次出现的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love C++!"</span>;</span><br><span class="line"><span class="keyword">if</span>(s.find(<span class="string">"C++"</span>)!=<span class="built_in">string</span>::npos)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s.find(<span class="string">"C++"</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(s.find(<span class="string">"C++"</span>,<span class="number">8</span>)!=<span class="built_in">string</span>::npos)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s.find(<span class="string">"python"</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出7 -1</span></span><br></pre></td></tr></table></figure><h3 id="8-replace"><a href="#8-replace" class="headerlink" title="8.replace()"></a>8.replace()</h3><h4 id="1-作用-7"><a href="#1-作用-7" class="headerlink" title="1.作用"></a>1.作用</h4><p>替换字符串</p><h4 id="2-时间复杂度-6"><a href="#2-时间复杂度-6" class="headerlink" title="2.时间复杂度"></a>2.时间复杂度</h4><p>$O(n)$ ($n$为要替换的字符串长度)</p><h4 id="3-用法-6"><a href="#3-用法-6" class="headerlink" title="3.用法"></a>3.用法</h4><p>1.$replace(node,len,s)$ 把原字符串从$node$号位置长度为$len$的子串替换为$s$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love python!"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.replace(<span class="number">7</span>,<span class="number">6</span>,<span class="string">"C++"</span>);<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><p>2.$replace(it1,it2,s)$ 表示把原字符串的迭代器$it1$~$it2$范围内(左闭右开区间)的子串替换为$s$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"I love python!"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.replace(s.begin()+<span class="number">7</span>,s.begin()+<span class="number">13</span>,<span class="string">"C++"</span>);<span class="comment">//输出I love C++!</span></span><br></pre></td></tr></table></figure><h2 id="8-字符串数字互化"><a href="#8-字符串数字互化" class="headerlink" title="8.字符串数字互化"></a>8.字符串数字互化</h2><p>可以用$sscanf$和$sprintf$实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"19260817"</span>;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">sscanf</span>(s.c_str(),<span class="string">"%d"</span>,&amp;a);<span class="comment">//把s以整数的形式输入到a(s要为字符数组)</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;<span class="comment">//输出19260817</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">19260817</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(s,<span class="string">"%d"</span>,a);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;<span class="comment">//输出19260817</span></span><br></pre></td></tr></table></figure><p>同时我们也可以用一个神奇的东西——$stringstream$</p><p>友情提示：这个东西十分耗时!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">"19260817"</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ss&lt;&lt;s;<span class="comment">//将s传入ss</span></span><br><span class="line">ss&gt;&gt;n;<span class="comment">//将ss传入n</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n;<span class="comment">//输出19260817</span></span><br></pre></td></tr></table></figure><p>如果要多次调用$stringstream$,记住在每一次使用前都要$clear()$</p><h2 id="9-推荐例题"><a href="#9-推荐例题" class="headerlink" title="9.推荐例题"></a>9.推荐例题</h2><ul><li><p>1 <del><a href="https://www.luogu.org/problemnew/show/P2482" target="_blank" rel="noopener">猪国杀</a></del></p></li><li><p>2 <a href="https://www.luogu.org/problemnew/show/P1308" target="_blank" rel="noopener">洛谷P1308 统计单词数</a></p></li></ul><p>思路点拨：运用$find$函数实现</p><ul><li>3 <a href="https://www.luogu.org/problemnew/show/P1079" target="_blank" rel="noopener">洛谷P1079 Vigenère 密码</a></li></ul><p>思路点拨：按照题意模拟即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-What’s-string&quot;&gt;&lt;a href=&quot;#1-What’s-string&quot; class=&quot;headerlink&quot; title=&quot;1.What’s string&quot;&gt;&lt;/a&gt;1.What’s string&lt;/h2&gt;&lt;p&gt;$string$ 是一种$STL$的
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="学习笔记" scheme="http://zyx02.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="字符串" scheme="http://zyx02.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>题解 P5269 【欧稳欧再次学车】</title>
    <link href="http://zyx02.github.io/2019/03/23/%E9%A2%98%E8%A7%A3-P5269-%E3%80%90%E6%AC%A7%E7%A8%B3%E6%AC%A7%E5%86%8D%E6%AC%A1%E5%AD%A6%E8%BD%A6%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/03/23/题解-P5269-【欧稳欧再次学车】/</id>
    <published>2019-03-23T11:29:21.000Z</published>
    <updated>2019-06-25T14:25:59.254Z</updated>
    
    <content type="html"><![CDATA[<p><del>三年OI一场空，不开long long 见祖宗</del></p><p>一道模拟题，具体解释在代码里：</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,l,r,x,k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dang,zhuan;<span class="comment">//一定要开long long !!!</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("1.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;t,&amp;n,&amp;l,&amp;r,&amp;x,&amp;k);</span><br><span class="line">    zhuan=l;<span class="comment">//zhuan存放转速</span></span><br><span class="line">    dang=<span class="number">1</span>;<span class="comment">//dang存放档位</span></span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> xx,yy;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;xx,&amp;yy);</span><br><span class="line">    <span class="keyword">if</span>(xx==<span class="number">0</span>)<span class="comment">//升档</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(dang==n) <span class="comment">//如果dang已经到达了n，那么是非法序列</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    dang++;</span><br><span class="line">    zhuan=l;<span class="comment">//转速调整为l</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(xx==<span class="number">1</span>)<span class="comment">//降档</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dang==<span class="number">1</span>) <span class="comment">//如果dang是1，那么是非法序列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dang--;</span><br><span class="line">zhuan=r;<span class="comment">//转速调整为r</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(yy==<span class="number">1</span>)<span class="comment">//踩油门</span></span><br><span class="line">&#123;</span><br><span class="line">zhuan+=x;<span class="comment">//转速加上x</span></span><br><span class="line"><span class="keyword">if</span>(zhuan&gt;r) zhuan=r;<span class="comment">//对r取min</span></span><br><span class="line">&#125;</span><br><span class="line">ans+=zhuan*dang <span class="comment">//一定要在发动机有没有爆炸前加</span></span><br><span class="line"><span class="keyword">if</span>(zhuan==r)</span><br><span class="line">&#123;</span><br><span class="line">flag++;</span><br><span class="line"><span class="keyword">if</span>(flag==k)<span class="comment">//爆炸</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;三年OI一场空，不开long long 见祖宗&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;一道模拟题，具体解释在代码里：&lt;/p&gt;
&lt;h3 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="模拟" scheme="http://zyx02.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>题解CF96A【Football】</title>
    <link href="http://zyx02.github.io/2019/03/19/%E9%A2%98%E8%A7%A3CF96A%E3%80%90Football%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/03/19/题解CF96A【Football】/</id>
    <published>2019-03-19T15:35:10.000Z</published>
    <updated>2019-06-25T14:24:59.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一道字符串模拟，直接暴力枚举即可"><a href="#一道字符串模拟，直接暴力枚举即可" class="headerlink" title="一道字符串模拟，直接暴力枚举即可"></a>一道字符串模拟，直接暴力枚举即可</h3><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; s.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c = s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; s.size(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j] != c)<span class="comment">//不一样直接退出</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">7</span>)<span class="comment">//有七个一样的输出YES</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"NO"</span>);<span class="comment">//不危险输出NO</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一道字符串模拟，直接暴力枚举即可&quot;&gt;&lt;a href=&quot;#一道字符串模拟，直接暴力枚举即可&quot; class=&quot;headerlink&quot; title=&quot;一道字符串模拟，直接暴力枚举即可&quot;&gt;&lt;/a&gt;一道字符串模拟，直接暴力枚举即可&lt;/h3&gt;&lt;h2 id=&quot;Code&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="字符串" scheme="http://zyx02.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="模拟" scheme="http://zyx02.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>洛谷神帖</title>
    <link href="http://zyx02.github.io/2019/03/11/%E6%B4%9B%E8%B0%B7%E7%A5%9E%E5%B8%96/"/>
    <id>http://zyx02.github.io/2019/03/11/洛谷神帖/</id>
    <published>2019-03-11T04:55:54.000Z</published>
    <updated>2019-06-25T14:24:21.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-炸出10几个管理员"><a href="#1-炸出10几个管理员" class="headerlink" title="1.炸出10几个管理员"></a>1.<a href="https://www.luogu.org/discuss/show/61884?page=1" target="_blank" rel="noopener">炸出10几个管理员</a></h3><h3 id="2-A-B-problem"><a href="#2-A-B-problem" class="headerlink" title="2.A+B problem"></a>2.<a href="https://www.luogu.org/discuss/show/87025" target="_blank" rel="noopener">A+B problem</a></h3><h3 id="3-洛谷新闻"><a href="#3-洛谷新闻" class="headerlink" title="3.洛谷新闻"></a>3.<a href="https://www.luogu.org/discuss/show/52654?page=1425" target="_blank" rel="noopener">洛谷新闻</a></h3><h3 id="4-第一高楼"><a href="#4-第一高楼" class="headerlink" title="4.第一高楼"></a>4.<a href="https://www.luogu.org/discuss/show/45953" target="_blank" rel="noopener">第一高楼</a></h3><h3 id="5-举报CCF-NOI"><a href="#5-举报CCF-NOI" class="headerlink" title="5.举报CCF_NOI"></a>5.<a href="https://www.luogu.org/discuss/show/53431" target="_blank" rel="noopener">举报CCF_NOI</a></h3><h3 id="6-AK-IOI"><a href="#6-AK-IOI" class="headerlink" title="6.AK IOI"></a>6.<a href="https://www.luogu.org/discuss/show/104980" target="_blank" rel="noopener">AK IOI</a></h3><h3 id="7-Harry-Potter事件"><a href="#7-Harry-Potter事件" class="headerlink" title="7.Harry_Potter事件"></a>7.<a href="https://www.luogu.org/discuss/show/33314" target="_blank" rel="noopener">Harry_Potter事件</a></h3><h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-炸出10几个管理员&quot;&gt;&lt;a href=&quot;#1-炸出10几个管理员&quot; class=&quot;headerlink&quot; title=&quot;1.炸出10几个管理员&quot;&gt;&lt;/a&gt;1.&lt;a href=&quot;https://www.luogu.org/discuss/show/61884?p
      
    
    </summary>
    
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>线段树学习笔记</title>
    <link href="http://zyx02.github.io/2019/03/11/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zyx02.github.io/2019/03/11/线段树学习笔记/</id>
    <published>2019-03-10T16:20:23.000Z</published>
    <updated>2019-06-25T14:25:57.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-线段树的作用"><a href="#1-线段树的作用" class="headerlink" title="1.线段树的作用"></a>1.线段树的作用</h2><p>   给定一个整数序列，让你完成如下操作</p><ul><li><p>修改序列上某个位置（区间）上的数</p></li><li><p>询问序列中某个区间的和</p><p>“暴力”算法</p></li><li><p>单点修改$O(1)$</p></li><li><p>询问区间和$O(区间长度)$</p><p>“前缀和”算法</p></li><li><p>单点修改$O(区间长度)$</p></li><li><p>询问区间和$O(1)$</p><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p>$O(nlogn)$</p></li></ul><h2 id="2-线段树的概念"><a href="#2-线段树的概念" class="headerlink" title="2.线段树的概念"></a>2.线段树的概念</h2><p>   线段树是一棵二叉树，树上的每个结点对应序列的一段区间</p><h2 id="3-线段树的操作"><a href="#3-线段树的操作" class="headerlink" title="3.线段树的操作"></a>3.线段树的操作</h2><h3 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1.结构体"></a>1.结构体</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,w,f;<span class="comment">//l,r代表左，右端点，w代表这一段区间和，f是懒标记（懒标记在之后会提到）</span></span><br><span class="line">&#125;tree[<span class="number">4</span>*n];<span class="comment">//线段树要开到4倍的空间</span></span><br></pre></td></tr></table></figure><h3 id="2-建树"><a href="#2-建树" class="headerlink" title="2.建树"></a>2.建树</h3><p>基本思想：</p><ul><li><p>1 二分</p></li><li><p>2 对于二分到的每一个结点，把左右端点的信息储存</p></li><li><p>3 叶结点输入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[k].l =l,tree[k].r =r;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l==tree[k].r)<span class="comment">//叶子结点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tree[k].w);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">build(l,m,k*<span class="number">2</span>);<span class="comment">//左孩子</span></span><br><span class="line">build(m+<span class="number">1</span>,r,k*<span class="number">2</span>+<span class="number">1</span>);<span class="comment">//右孩子</span></span><br><span class="line">tree[k].w =tree[k*<span class="number">2</span>].w +tree[k*<span class="number">2</span>+<span class="number">1</span>].w ;<span class="comment">//合并</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-单点查询"><a href="#3-单点查询" class="headerlink" title="3.单点查询"></a>3.单点查询</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l ==tree[k].r )<span class="comment">//是目标结点</span></span><br><span class="line">&#123;</span><br><span class="line">ans=tree[k].w ;<span class="comment">//储存答案</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[k].f ) down(k);<span class="comment">//下传懒标记</span></span><br><span class="line"><span class="keyword">int</span> m=(tree[k].l +tree[k].r )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=m) ask(k*<span class="number">2</span>);<span class="comment">//在左边递归左孩子</span></span><br><span class="line"><span class="keyword">else</span> ask(k*<span class="number">2</span>+<span class="number">1</span>);<span class="comment">//在右边递归右孩子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-单点修改"><a href="#4-单点修改" class="headerlink" title="4.单点修改"></a>4.单点修改</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l ==tree[k].r )<span class="comment">//是目标结点</span></span><br><span class="line">&#123;</span><br><span class="line">tree[k].w +=y;<span class="comment">//修改</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[k].f ) down(k);<span class="comment">//懒标记下传</span></span><br><span class="line"><span class="keyword">int</span> m=(tree[k].l +tree[k].r )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=m) add(k*<span class="number">2</span>);<span class="comment">//在左边递归左孩子</span></span><br><span class="line"><span class="keyword">else</span> add(k*<span class="number">2</span>+<span class="number">1</span>);<span class="comment">//在右边递归右孩子</span></span><br><span class="line">tree[k].w =tree[k*<span class="number">2</span>].w +tree[k*<span class="number">2</span>+<span class="number">1</span>].w ;<span class="comment">//状态修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-区间求和"><a href="#5-区间求和" class="headerlink" title="5.区间求和"></a>5.区间求和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l &gt;=x&amp;&amp;tree[k].r &lt;=y)<span class="comment">//左右端点全在目标区间内</span></span><br><span class="line">&#123;</span><br><span class="line">ans+=tree[k].w ;<span class="comment">//答案直接加上这一段区间和</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[k].f ) down(k);<span class="comment">//懒标记下传</span></span><br><span class="line"><span class="keyword">int</span> m=(tree[k].l +tree[k].r )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=m) sum(k*<span class="number">2</span>);<span class="comment">//往左孩子移</span></span><br><span class="line"><span class="keyword">if</span>(y&gt;m) sum(k*<span class="number">2</span>+<span class="number">1</span>);<span class="comment">//往右孩子移</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-区间修改"><a href="#6-区间修改" class="headerlink" title="6.区间修改"></a>6.区间修改</h3><p>在前面的操作中我们经常看到有懒标记下传这个操作，那么懒标记到底是什么呢</p><h4 id="1-1懒标记的作用"><a href="#1-1懒标记的作用" class="headerlink" title="1.1懒标记的作用"></a>1.1懒标记的作用</h4><p>  存储到这个节点的更新信息，暂时不把更新信息传到子节点。</p><h4 id="1-2懒标记的下传"><a href="#1-2懒标记的下传" class="headerlink" title="1.2懒标记的下传"></a>1.2懒标记的下传</h4><ul><li><p>1 将当前节点的懒标记累加到子节点的懒标记中</p></li><li><p>2 修改子节点状态，即区间和$w$=原状态+区间长度×父节点下传的懒标记</p></li><li><p>3 父节点懒标记清空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[k*<span class="number">2</span>].f +=tree[k].f ;<span class="comment">//修改子节点懒标记(下同)</span></span><br><span class="line">tree[k*<span class="number">2</span>+<span class="number">1</span>].f +=tree[k].f ;</span><br><span class="line">tree[k*<span class="number">2</span>].w +=tree[k].f *(tree[k*<span class="number">2</span>].r -tree[k*<span class="number">2</span>].l +<span class="number">1</span>);<span class="comment">//修改子节点状态(下同)</span></span><br><span class="line">tree[k*<span class="number">2</span>+<span class="number">1</span>].w +=tree[k].f *(tree[k*<span class="number">2</span>+<span class="number">1</span>].r -tree[k*<span class="number">2</span>+<span class="number">1</span>].l +<span class="number">1</span>);</span><br><span class="line">tree[k].f =<span class="number">0</span>;<span class="comment">//懒标记清零</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-区间修改"><a href="#2-区间修改" class="headerlink" title="2.区间修改"></a>2.区间修改</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">//y为增加的数，(a,b)为目标区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l &gt;=a&amp;&amp;tree[k].r &lt;=b)<span class="comment">//在目标左右端点内</span></span><br><span class="line">&#123;</span><br><span class="line">tree[k].w +=(tree[k].r -tree[k].l +<span class="number">1</span>)*y;<span class="comment">//状态修改</span></span><br><span class="line">tree[k].f +=y;<span class="comment">//懒标记加上y</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[k].f) down(k);<span class="comment">//懒标记下传</span></span><br><span class="line"><span class="keyword">int</span> m=(tree[k].l +tree[k].r )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a&lt;=m) add2(k*<span class="number">2</span>);<span class="comment">//如区间求和(下同)</span></span><br><span class="line"><span class="keyword">if</span>(b&gt;m) add2(k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">tree[k].w =tree[k*<span class="number">2</span>].w +tree[k*<span class="number">2</span>+<span class="number">1</span>].w ;<span class="comment">//修改状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l,r,w,f;</span><br><span class="line">&#125; tree[<span class="number">400001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,x,y,a,b,n,p,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span><span class="comment">//建树 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[k].l =l,tree[k].r =r;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l==tree[k].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;tree[k].w);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">build(l,m,k*<span class="number">2</span>);</span><br><span class="line">build(m+<span class="number">1</span>,r,k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">tree[k].w =tree[k*<span class="number">2</span>].w +tree[k*<span class="number">2</span>+<span class="number">1</span>].w ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">//懒标记下传 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[k*<span class="number">2</span>].f +=tree[k].f ;</span><br><span class="line">tree[k*<span class="number">2</span>+<span class="number">1</span>].f +=tree[k].f ;</span><br><span class="line">tree[k*<span class="number">2</span>].w +=tree[k].f *(tree[k*<span class="number">2</span>].r -tree[k*<span class="number">2</span>].l +<span class="number">1</span>);</span><br><span class="line">tree[k*<span class="number">2</span>+<span class="number">1</span>].w +=tree[k].f *(tree[k*<span class="number">2</span>+<span class="number">1</span>].r -tree[k*<span class="number">2</span>+<span class="number">1</span>].l +<span class="number">1</span>);</span><br><span class="line">tree[k].f =<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">//单点查询 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l ==tree[k].r )</span><br><span class="line">&#123;</span><br><span class="line">ans=tree[k].w ;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[k].f ) down(k);</span><br><span class="line"><span class="keyword">int</span> m=(tree[k].l +tree[k].r )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=m) ask(k*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> ask(k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">//单点修改加法 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l ==tree[k].r )</span><br><span class="line">&#123;</span><br><span class="line">tree[k].w +=y;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[k].f ) down(k);</span><br><span class="line"><span class="keyword">int</span> m=(tree[k].l +tree[k].r )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=m) add(k*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> add(k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">tree[k].w =tree[k*<span class="number">2</span>].w +tree[k*<span class="number">2</span>+<span class="number">1</span>].w ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">//区间求和 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l &gt;=x&amp;&amp;tree[k].r &lt;=y)</span><br><span class="line">&#123;</span><br><span class="line">ans+=tree[k].w ;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[k].f ) down(k);</span><br><span class="line"><span class="keyword">int</span> m=(tree[k].l +tree[k].r )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=m) sum(k*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(y&gt;m) sum(k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">//区间修改加法 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l &gt;=a&amp;&amp;tree[k].r &lt;=b)</span><br><span class="line">&#123;</span><br><span class="line">tree[k].w +=(tree[k].r -tree[k].l +<span class="number">1</span>)*y;</span><br><span class="line">tree[k].f +=y;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[k].f) down(k);</span><br><span class="line"><span class="keyword">int</span> m=(tree[k].l +tree[k].r )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a&lt;=m) add2(k*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(b&gt;m) add2(k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">tree[k].w =tree[k*<span class="number">2</span>].w +tree[k*<span class="number">2</span>+<span class="number">1</span>].w ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);<span class="comment">//n个数和m个操作</span></span><br><span class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);<span class="comment">//建树</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;p);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;<span class="comment">//1为单点查询</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">ask(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:&#123;<span class="comment">//2为单点修改</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">add(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:&#123;<span class="comment">//3为区间求和</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y ;</span><br><span class="line">sum(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:&#123;<span class="comment">//4为区间修改</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; y;</span><br><span class="line">add2(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-推荐例题"><a href="#5-推荐例题" class="headerlink" title="5.推荐例题"></a>5.推荐例题</h2><ul><li>1 <a href="https://www.luogu.org/problemnew/show/P2068" target="_blank" rel="noopener">洛谷P2068统计和</a></li></ul><p>思路点拨：线段树模板</p><ul><li>2 <a href="https://www.luogu.org/problemnew/show/P3372" target="_blank" rel="noopener">洛谷P3372【模板】线段树 1</a></li></ul><p>思路点拨：线段树模板</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-线段树的作用&quot;&gt;&lt;a href=&quot;#1-线段树的作用&quot; class=&quot;headerlink&quot; title=&quot;1.线段树的作用&quot;&gt;&lt;/a&gt;1.线段树的作用&lt;/h2&gt;&lt;p&gt;   给定一个整数序列，让你完成如下操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改序列上某个位置
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="学习笔记" scheme="http://zyx02.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="线段树" scheme="http://zyx02.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF32A 【Reconnaissance】</title>
    <link href="http://zyx02.github.io/2019/03/10/%E9%A2%98%E8%A7%A3-CF32A-%E3%80%90Reconnaissance%E3%80%91/"/>
    <id>http://zyx02.github.io/2019/03/10/题解-CF32A-【Reconnaissance】/</id>
    <published>2019-03-10T02:40:23.000Z</published>
    <updated>2019-06-25T14:24:49.539Z</updated>
    
    <content type="html"><![CDATA[<p>一看到了求方案数，马上想到了<del>枚举</del> $dfs$</p><p>深搜思路：$dfs(t)$  ($t$为选了几个人) </p><ul><li><p>1 如果已经选取了两个数，$ans$++并$return$</p></li><li><p>2 枚举$1\sim n$ 如果第$a_{i}$个人没被选过且与前一个人身高差的绝对值不超过$d$，则标记为已选并$dfs(t+1)$</p></li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,d,a[<span class="number">1010</span>],ans,s[<span class="number">1010</span>];<span class="comment">//s用来存前一个人的身高</span></span><br><span class="line"><span class="keyword">bool</span> p[<span class="number">1010</span>];<span class="comment">//p用来标记已选过的人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[<span class="number">0</span>]=a[i];<span class="comment">//s[0]需要设成a[i]，这样第一个人才能选</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i]-s[t<span class="number">-1</span>])&lt;=d&amp;&amp;!p[i])</span><br><span class="line">        &#123;</span><br><span class="line">            p[i]=<span class="number">1</span>;</span><br><span class="line">            s[t]=a[i];<span class="comment">//记录前一个人的身高</span></span><br><span class="line">            dfs(t+<span class="number">1</span>);</span><br><span class="line">            p[i]=<span class="number">0</span>;<span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一看到了求方案数，马上想到了&lt;del&gt;枚举&lt;/del&gt; $dfs$&lt;/p&gt;
&lt;p&gt;深搜思路：$dfs(t)$  ($t$为选了几个人) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 如果已经选取了两个数，$ans$++并$return$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2 枚举$
      
    
    </summary>
    
    
      <category term="C++" scheme="http://zyx02.github.io/tags/C/"/>
    
      <category term="洛谷" scheme="http://zyx02.github.io/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题解" scheme="http://zyx02.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://zyx02.github.io/tags/CodeForces/"/>
    
      <category term="深度优先搜索（dfs）" scheme="http://zyx02.github.io/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88dfs%EF%BC%89/"/>
    
  </entry>
  
</feed>
